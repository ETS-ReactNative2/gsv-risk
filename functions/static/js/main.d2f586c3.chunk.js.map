{"version":3,"sources":["js/components/Factor.js","js/util.js","js/components/Results.js","js/components/Main.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","_super","call","state","inputChanging","value","setState","input","e","key","handleTextBlur","factor","onFactorInputChange","_this2","_step","_iterator","_createForOfIteratorHelper","options","s","n","done","option","err","f","react_default","a","createElement","className","react_select_browser_esm","classNamePrefix","onMenuOpen","handleMenuOpen","onMenuClose","handleMenuClose","onChange","values","handleSelectChange","prompt","_this3","type","handleTextChange","target","onKeyPress","handleKeyPress","onBlur","content","renderSelectContent","renderNumberContent","hasvalue","ischanging","React","Component","MAX_GSV","MIN_GSV","MASK_HELP_RATIO","INITIAL_FACTORS","id","label","example","default","updateDefault","meta","calculateGsv","factors","baseFactorValues","compareFactorValues","util_createForOfIteratorHelper","resultFromFactorValues","factorValues","inner","transmission","masks","infected","Math","pow","interactions","baseResult","compareResult","gsv","log","cleanValue","min","max","getInputFromFactor","parsedVal","parseFloat","_step2","_iterator2","Results","frac","concat","calculateLogFraction","fractionToColor","maxGsv","arguments","length","undefined","log10","heightPercent","color","gsvToColor","style","height","backgroundColor","toFixed","getGsvText","Main","uri","URI","qParams","query","Main_createForOfIteratorHelper","hasQuery","removeQuery","window","history","replaceState","toString","_","cloneDeep","curr","addQuery","encodeURIComponent","pushState","_step3","_iterator3","push","Factor_Input","handleFactorInputChange","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","renderFactors","Results_Results","ReactDOM","render","Main_Main","document","getElementById"],"mappings":"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","file":"static/js/main.d2f586c3.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\nexport default class Input extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputChanging: false\n    };\n  }\n\n  handleTextChange(value) {\n    this.setState({\n      input: value,\n      inputChanging: true\n    });\n  }\n\n  handleKeyPress(e, value) {\n    if (e.key === 'Enter') {\n      this.handleTextBlur(value);\n    }\n  }\n\n  handleTextBlur(value) {\n    let factor = this.props.factor;\n    factor.input = value || value === 0 ? value : null;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  handleSelectChange(value) {\n    let factor = this.props.factor;\n    factor.input = value.value;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  handleMenuOpen() {\n    this.setState({\n      inputChanging: true\n    });\n  }\n\n  handleMenuClose() {\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  renderSelectContent() {\n    let value = null;\n    if (this.props.factor.input || this.props.factor.input === 0) {\n      for (const option of this.props.factor.options) {\n        if (option.value === this.props.factor.input) {\n          value = option;\n          break;\n        }\n      }\n    }\n    return (\n      <label className=\"Factor-label\">\n        <Select className=\"Factor-input Factor-input--select\" classNamePrefix=\"Select\"\n                options={this.props.factor.options} value={value}\n                onMenuOpen={() => this.handleMenuOpen()} onMenuClose={() => this.handleMenuClose()}\n                onChange={(values) => this.handleSelectChange(values)} />\n        <div className=\"Factor-prompt\">\n          {this.props.factor.prompt}\n        </div>\n      </label>\n    )\n  }\n\n  renderNumberContent(value) {\n    return (\n      <label className=\"Factor-label\">\n        <input className={`Factor-input Factor-input--number`}\n              type=\"number\" value={value}\n              onChange={(e) => this.handleTextChange(e.target.value)}\n              onKeyPress={(e) => this.handleKeyPress(e, value)}\n              onBlur={(e) => this.handleTextBlur(e.target.value)}>\n        </input>\n        <div className=\"Factor-prompt\">\n          {this.props.factor.prompt}\n        </div>\n      </label>\n    )\n  }\n\n  render() {\n    const input = this.state.inputChanging ? this.state.input : this.props.factor.input;\n    const type = this.props.factor.type ? this.props.factor.type : 'text';\n    const value = input || input === 0 ? input + '' : '';\n\n    const content = this.props.factor.options ? this.renderSelectContent() : this.renderNumberContent(value);\n    return (\n      <div className=\"Factor\" hasvalue={value ? 'true' : 'false'} ischanging={this.state.inputChanging + ''}>\n        {content}\n      </div>\n    );\n  }\n}\n","export const MAX_GSV = 50;\nexport const MIN_GSV = 0.1;\nexport const MASK_HELP_RATIO = 0.5;\n\nexport const INITIAL_FACTORS = [\n  {\n    id: 'transmission',\n    prompt: 'Which best describes the type of interactions you\\'ll have?',\n    type: 'number',\n    options: [\n      {\n        'value': 2,\n        'label': 'Brief outdoor contact',\n        'example': 'Passing by somone on a sidewalk'\n      },\n      {\n        'value': 5,\n        'label': 'Brief indoor contact',\n        'example': 'Slipping by somone in a store aisle'\n      },\n      {\n        'value': 10,\n        'label': 'Brief close contact',\n        'example': 'Sharing a small elevator'\n      },\n      {\n        'value': 25,\n        'label': 'Extended close contact',\n        'example': 'Having dinner with someone'\n      },\n      {\n        'value': 50,\n        'label': 'Significant physical contact',\n        'example': 'Repeated hugging, shoulder to shoulder, etc'\n      }\n    ],\n    default: 5,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'interactions',\n    prompt: 'How many people will you interact with?',\n    meta: '[INPUT] interactions',\n    type: 'number',\n    default: 15,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'masks',\n    prompt: 'What percent of people will be wearing masks?',\n    meta: '[INPUT]% of people wearing masks',\n    type: 'number',\n    default: 100,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'infected',\n    prompt: 'What percent of people in your area are infected?',\n    meta: '[INPUT]% infected',\n    type: 'number',\n    default: 1.2,\n    updateDefault: true,\n    input: null\n  }\n]\n\nexport function calculateGsv(factors) {\n  let baseFactorValues = {};\n  let compareFactorValues = {};\n  for (const factor of factors) {\n    baseFactorValues[factor.id] = factor.default;\n    compareFactorValues[factor.id] = factor.input || factor.input === 0 ? factor.input : factor.default;\n  }\n\n  const resultFromFactorValues = (factorValues) => {\n    const transmit = (factorValues.transmission / 100) * (1 - (factorValues.masks / 100)) + (MASK_HELP_RATIO * factorValues.transmission / 100) * (factorValues.masks / 100);\n    const inner = 1 - (transmit * (factorValues.infected / 100));\n    const result = 1 - (inner ** factorValues.interactions);\n    return result;\n  }\n\n  const baseResult = resultFromFactorValues(baseFactorValues);\n  const compareResult = resultFromFactorValues(compareFactorValues);\n\n  const gsv = Math.log(1 - compareResult) / Math.log(1 - baseResult);\n\n  let cleanValue = Math.min(gsv || gsv, MAX_GSV);\n  return Math.max(cleanValue, MIN_GSV);\n}\n\nexport function getInputFromFactor(factor) {\n  if (factor.type === 'number') {\n    const parsedVal = parseFloat(factor.input);\n    if (parsedVal || parsedVal === 0) {\n      if (factor.options) {\n        for (const option of factor.options) {\n          if (option.value === parsedVal) {\n            return parsedVal;\n          }\n        }\n        return null;\n      } else {\n        return parsedVal;\n      }\n    } else {\n      return null;\n    }\n  } else if (factor.input) {\n    return factor.input;\n  }\n  return null;\n}\n\nexport function getGsvText(gsv) {\n  if (gsv === 50) {\n    return `${gsv}+`;\n  } else if (gsv === 0.1) {\n    return `< ${gsv}`;\n  } else if (gsv < 5) {\n    return gsv.toFixed(1);\n  } else {\n    return gsv.toFixed(0);\n  }\n}\n","import React from 'react';\n\nimport { MAX_GSV, getGsvText } from '../util.js';\n\nconst RED_GSV = 25; // GSV value at which point bar color should be fully red\nconst RED_HUE = 9;\nconst GREEN_HUE = 123;\n\nexport default class Results extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gsv: 1\n    };\n  }\n\n  fractionToColor(frac) {\n    var hue = (frac * (RED_HUE - GREEN_HUE)) + GREEN_HUE;\n    return `hsl(${hue}, 100%, 43%)`;\n  }\n\n  gsvToColor(gsv) {\n    let frac = this.calculateLogFraction(gsv, RED_GSV);\n    return this.fractionToColor(frac)\n  }\n\n  calculateLogFraction(gsv, maxGsv = MAX_GSV) {\n    return Math.log10(Math.min(gsv + 1, maxGsv)) / Math.log10(maxGsv);\n  }\n\n  render() {\n    let gsv = this.props.gsv || this.state.gsv;\n    const heightPercent = `${100 * this.calculateLogFraction(gsv)}%`;\n    const color = this.gsvToColor(gsv);\n    return (\n      <div className=\"Results\">\n        <div className=\"Results-bar\" style={{height: heightPercent, backgroundColor: color}}>\n          <div className=\"Results-num\">\n            {getGsvText(gsv)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport _ from 'lodash';\nimport URI from 'urijs';\n\nimport Factor from './Factor.js';\nimport Results from './Results.js';\n\nimport { INITIAL_FACTORS, calculateGsv, getInputFromFactor } from '../util.js';\n\nexport default class Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const uri = new URI();\n    const qParams = uri.query(true);\n    let factors = INITIAL_FACTORS;\n\n    for (const factor of factors) {\n      if (uri.hasQuery(factor.id)) {\n        factor.input = qParams[factor.id];\n        factor.input = getInputFromFactor(factor);\n        if (factor.input === null) {\n          uri.removeQuery(factor.id);\n        }\n      }\n    }\n    window.history.replaceState(null, 'GSV Risk', uri.toString());\n\n    this.state = {\n      factors: factors\n    };\n  }\n\n  handleFactorInputChange(factor) {\n    let factors = _.cloneDeep(this.state.factors);\n    for (const curr of factors) {\n      if (curr.id === factor.id) {\n        const input = getInputFromFactor(factor);\n        curr.input = input;\n        if (factor.updateDefault && (input || input === 0)) {\n          curr.default = input;\n        }\n\n        let uri = new URI();\n        uri.removeQuery(curr.id);\n        if (curr.input || curr.input === 0) {\n          uri.addQuery(curr.id, encodeURIComponent(curr.input))\n        }\n        window.history.pushState(null, 'GSV Risk', uri.toString());\n\n        break;\n      }\n    }\n\n    this.setState({\n      factors: factors\n    })\n  }\n\n  renderFactors() {\n    let factors = [];\n    for (const factor of this.state.factors) {\n      factors.push(\n        <Factor factor={factor} key={factor.id} onFactorInputChange={(factor) => this.handleFactorInputChange(factor)} />\n      );\n      if (factor.input === null || factor.input === undefined) {\n        break;\n      }\n    }\n    return factors;\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <div className=\"Main-container l-container\">\n          <div className=\"Main-left\">\n            <CSSTransitionGroup\n              transitionName=\"example\"\n              transitionEnterTimeout={500}\n              transitionLeaveTimeout={300}>\n              {this.renderFactors()}\n            </CSSTransitionGroup>\n          </div>\n          <div className=\"Main-right\">\n            <Results gsv={calculateGsv(this.state.factors)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './js/polyfill.js';\nimport './default.scss';\n\nimport Main from './js/components/Main.js';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}