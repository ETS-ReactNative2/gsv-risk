{"version":3,"sources":["js/components/Factor.js","js/util.js","js/components/Results.js","js/components/Main.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","_super","call","state","inputChanging","value","setState","input","e","key","handleTextBlur","factor","onFactorInputChange","_this2","react_default","a","createElement","className","react_select_browser_esm","options","classNamePrefix","onMenuOpen","handleMenuOpen","onMenuClose","handleMenuClose","onChange","values","handleSelectChange","prompt","_this3","type","handleTextChange","target","onKeyPress","handleKeyPress","onBlur","content","renderNumberContent","renderSelectContent","hasvalue","ischanging","React","Component","MAX_GSV","MIN_GSV","MASK_HELP_RATIO","INITIAL_FACTORS","id","label","example","default","updateDefault","calculateGsv","factors","_step","baseFactorValues","compareFactorValues","_iterator","_createForOfIteratorHelper","s","n","done","err","f","resultFromFactorValues","factorValues","inner","transmission","masks","infected","Math","pow","interactions","baseResult","compareResult","gsv","log","cleanValue","min","max","Results","frac","concat","calculateLogFraction","fractionToColor","maxGsv","arguments","length","undefined","log10","toFixed","heightPercent","color","gsvToColor","style","height","backgroundColor","getGsvText","Main","_","cloneDeep","Main_createForOfIteratorHelper","curr","parsedVal","parseFloat","_step2","_iterator2","push","Factor_Input","handleFactorInputChange","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","renderFactors","Results_Results","ReactDOM","render","Main_Main","document","getElementById"],"mappings":"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","file":"static/js/main.dbf06293.chunk.js","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\n\nexport default class Input extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputChanging: false\n    };\n  }\n\n  handleTextChange(value) {\n    this.setState({\n      input: value,\n      inputChanging: true\n    });\n  }\n\n  handleKeyPress(e, value) {\n    if (e.key === 'Enter') {\n      this.handleTextBlur(value);\n    }\n  }\n\n  handleTextBlur(value) {\n    let factor = this.props.factor;\n    factor.input = value || value === 0 ? value : null;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  handleSelectChange(value) {\n    let factor = this.props.factor;\n    factor.input = value.value;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  handleMenuOpen() {\n    this.setState({\n      inputChanging: true\n    });\n  }\n\n  handleMenuClose() {\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  renderSelectContent() {\n    return (\n      <label className=\"Factor-label\">\n        <Select options={this.props.factor.options} className=\"Factor-input Factor-input--select\" classNamePrefix=\"Select\"\n                onMenuOpen={() => this.handleMenuOpen()} onMenuClose={() => this.handleMenuClose()}\n                onChange={(values) => this.handleSelectChange(values)} />\n        <div className=\"Factor-prompt\">\n          {this.props.factor.prompt}\n        </div>\n      </label>\n    )\n  }\n\n  renderNumberContent(value) {\n    return (\n      <label className=\"Factor-label\">\n        <input className={`Factor-input Factor-input--number`}\n              type=\"number\" value={value}\n              onChange={(e) => this.handleTextChange(e.target.value)}\n              onKeyPress={(e) => this.handleKeyPress(e, value)}\n              onBlur={(e) => this.handleTextBlur(e.target.value)}>\n        </input>\n        <div className=\"Factor-prompt\">\n          {this.props.factor.prompt}\n        </div>\n      </label>\n    )\n  }\n\n  render() {\n    const input = this.state.inputChanging ? this.state.input : this.props.factor.input;\n    const type = this.props.factor.type ? this.props.factor.type : 'text';\n    const value = input || input === 0 ? input + '' : '';\n\n    const content = type === 'number' ? this.renderNumberContent(value) : this.renderSelectContent();\n    return (\n      <div className=\"Factor\" hasvalue={value ? 'true' : 'false'} ischanging={this.state.inputChanging + ''}>\n        {content}\n      </div>\n    );\n  }\n}\n","export const MAX_GSV = 50;\nexport const MIN_GSV = 0.1;\nexport const MASK_HELP_RATIO = 0.5;\n\nexport const INITIAL_FACTORS = [\n  {\n    id: 'transmission',\n    prompt: 'Which best describes the type of interactions you\\'ll have?',\n    type: 'select',\n    options: [\n      {\n        'value': 2,\n        'label': 'Brief outdoor contact',\n        'example': 'Passing by somone on a sidewalk'\n      },\n      {\n        'value': 5,\n        'label': 'Brief indoor contact',\n        'example': 'Slipping by somone in a store aisle'\n      },\n      {\n        'value': 10,\n        'label': 'Brief close contact',\n        'example': 'Sharing a small elevator'\n      },\n      {\n        'value': 25,\n        'label': 'Extended close contact',\n        'example': 'Having dinner with someone'\n      },\n      {\n        'value': 50,\n        'label': 'Significant physical contact',\n        'example': 'Repeated hugging, shoulder to shoulder, etc'\n      }\n    ],\n    default: 5,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'interactions',\n    prompt: 'How many people will you interact with?',\n    type: 'number',\n    default: 15,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'masks',\n    prompt: 'What percent of people will be wearing masks?',\n    type: 'number',\n    default: 100,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'infected',\n    prompt: 'What percent of people in your area are infected?',\n    type: 'number',\n    default: 1.2,\n    updateDefault: true,\n    input: null\n  }\n]\n\nexport function calculateGsv(factors) {\n  let baseFactorValues = {};\n  let compareFactorValues = {};\n  for (const factor of factors) {\n    baseFactorValues[factor.id] = factor.default;\n    compareFactorValues[factor.id] = factor.input || factor.input === 0 ? factor.input : factor.default;\n  }\n\n  const resultFromFactorValues = (factorValues) => {\n    const transmit = (factorValues.transmission / 100) * (1 - (factorValues.masks / 100)) + (MASK_HELP_RATIO * factorValues.transmission / 100) * (factorValues.masks / 100);\n    const inner = 1 - (transmit * (factorValues.infected / 100));\n    const result = 1 - (inner ** factorValues.interactions);\n    return result;\n  }\n\n  const baseResult = resultFromFactorValues(baseFactorValues);\n  const compareResult = resultFromFactorValues(compareFactorValues);\n\n  const gsv = Math.log(1 - compareResult) / Math.log(1 - baseResult);\n\n  let cleanValue = Math.min(gsv || gsv, MAX_GSV);\n  return Math.max(cleanValue, MIN_GSV);\n}\n","import React from 'react';\n\nimport { MAX_GSV } from '../util.js';\n\nconst RED_GSV = 25; // GSV value at which point bar color should be fully red\nconst RED_HUE = 9;\nconst GREEN_HUE = 123;\n\nexport default class Results extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gsv: 1\n    };\n  }\n\n  fractionToColor(frac) {\n    var hue = (frac * (RED_HUE - GREEN_HUE)) + GREEN_HUE;\n    return `hsl(${hue}, 100%, 43%)`;\n  }\n\n  gsvToColor(gsv) {\n    let frac = this.calculateLogFraction(gsv, RED_GSV);\n    return this.fractionToColor(frac)\n  }\n\n  calculateLogFraction(gsv, maxGsv = MAX_GSV) {\n    return Math.log10(Math.min(gsv + 1, maxGsv)) / Math.log10(maxGsv);\n  }\n\n  getGsvText(gsv) {\n    if (gsv === 50) {\n      return `${gsv}+`;\n    } else if (gsv === 0.1) {\n      return `< ${gsv}`;\n    } else if (gsv < 5) {\n      return gsv.toFixed(1);\n    } else {\n      return gsv.toFixed(0);\n    }\n  }\n\n  render() {\n    let gsv = this.props.gsv || this.state.gsv;\n    const heightPercent = `${100 * this.calculateLogFraction(gsv)}%`;\n    const color = this.gsvToColor(gsv);\n    return (\n      <div className=\"Results\">\n        <div className=\"Results-bar\" style={{height: heightPercent, backgroundColor: color}}>\n          <div className=\"Results-num\">\n            {this.getGsvText(gsv)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport _ from 'lodash';\n\nimport '../polyfill.js';\n\nimport Factor from './Factor';\nimport Results from './Results';\n\nimport { INITIAL_FACTORS, calculateGsv } from '../util.js';\n\nexport default class Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      factors: INITIAL_FACTORS\n    };\n  }\n\n  handleFactorInputChange(factor) {\n    let factors = _.cloneDeep(this.state.factors);\n    for (const curr of factors) {\n      if (curr.id === factor.id) {\n        if (factor.type === 'number') {\n          const parsedVal = parseFloat(factor.input);\n          if (parsedVal || parsedVal === 0) {\n            curr.input = parsedVal;\n            if (factor.updateDefault) {\n              curr.default = parsedVal;\n            }\n          } else {\n            curr.input = null;\n          }\n        } else {\n          curr.input = factor.input;\n          if (factor.updateDefault) {\n            curr.default = factor.input;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({\n      factors: factors\n    })\n  }\n\n  renderFactors() {\n    let factors = [];\n    for (const factor of this.state.factors) {\n      factors.push(\n        <Factor factor={factor} key={factor.id} onFactorInputChange={(factor) => this.handleFactorInputChange(factor)} />\n      );\n      if (factor.input === null || factor.input === undefined) {\n        break;\n      }\n    }\n    return factors;\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <div className=\"Main-container l-container\">\n          <div className=\"Main-left\">\n            <CSSTransitionGroup\n              transitionName=\"example\"\n              transitionEnterTimeout={500}\n              transitionLeaveTimeout={300}>\n              {this.renderFactors()}\n            </CSSTransitionGroup>\n          </div>\n          <div className=\"Main-right\">\n            <Results gsv={calculateGsv(this.state.factors)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './default.scss';\n\nimport Main from './js/components/Main.js';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}