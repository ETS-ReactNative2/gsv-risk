{"version":3,"sources":["js/components/Factor.js","js/util.js","js/components/Results.js","js/components/Main.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","_super","call","state","inputChanging","value","setState","input","e","key","handleTextBlur","factor","onFactorInputChange","_this2","type","react_default","a","createElement","className","concat","hasvalue","onChange","handleTextChange","target","onKeyPress","handleKeyPress","onBlur","prompt","React","Component","MAX_GSV","MIN_GSV","calculateGsv","factors","_step","baseFactorValues","compareFactorValues","_iterator","_createForOfIteratorHelper","s","n","done","id","default","err","f","baseInner","infected","transmission","baseValue","Math","pow","interactions","compareInner","compareValue","gsv","log","cleanValue","min","max","Results","frac","calculateLogFraction","fractionToColor","maxGsv","arguments","length","undefined","log10","toFixed","heightPercent","color","gsvToColor","style","height","backgroundColor","getGsvText","Main","updateDefault","_","cloneDeep","Main_createForOfIteratorHelper","curr","parsedVal","parseFloat","_step2","_iterator2","push","Factor_Input","handleFactorInputChange","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","renderFactors","Results_Results","ReactDOM","render","Main_Main","document","getElementById"],"mappings":"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","file":"static/js/main.6fff4c80.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Input extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputChanging: false\n    };\n  }\n\n  handleTextChange(value) {\n    this.setState({\n      input: value,\n      inputChanging: true\n    });\n  }\n\n  handleKeyPress(e, value) {\n    if (e.key === 'Enter') {\n      this.handleTextBlur(value);\n    }\n  }\n\n  handleTextBlur(value) {\n    let factor = this.props.factor;\n    factor.input = value || value === 0 ? value : null;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  render() {\n    const input = this.state.inputChanging ? this.state.input : this.props.factor.input;\n    const type = this.props.factor.type ? this.props.factor.type : 'text';\n    const value = input || input === 0 ? input + '' : '';\n    return (\n      <div className=\"Factor\">\n        <label className=\"Factor-label\">\n          <input className={`Factor-input Factor-input--${type}`}\n                 type={type} value={value} hasvalue={value ? 'true' : 'false'}\n                 onChange={(e) => this.handleTextChange(e.target.value)}\n                 onKeyPress={(e) => this.handleKeyPress(e, value)}\n                 onBlur={(e) => this.handleTextBlur(e.target.value)}>\n          </input>\n          <div className=\"Factor-prompt\">\n            {this.props.factor.prompt}\n          </div>\n        </label>\n      </div>\n    );\n  }\n}\n","export const MAX_GSV = 50;\nexport const MIN_GSV = 0.1;\n\nexport function calculateGsv(factors) {\n  let baseFactorValues = {};\n  let compareFactorValues = {};\n  for (const factor of factors) {\n    baseFactorValues[factor.id] = factor.default;\n    compareFactorValues[factor.id] = factor.input || factor.input === 0 ? factor.input : factor.default;\n  }\n\n  const baseInner = 1 - ((baseFactorValues.infected / 100) * (baseFactorValues.transmission / 100));\n  const baseValue = 1 - (baseInner ** baseFactorValues.interactions);\n  const compareInner = 1 - ((compareFactorValues.infected / 100) * (compareFactorValues.transmission / 100));\n  const compareValue = 1 - (compareInner ** compareFactorValues.interactions);\n\n  const gsv = Math.log(1 - compareValue) / Math.log(1 - baseValue);\n\n  let cleanValue = Math.min(gsv || gsv, MAX_GSV);\n  return Math.max(cleanValue, MIN_GSV);\n\n  // if (cleanValue < 5) {\n  //   return Math.round(cleanValue * 10) / 10;\n  //   // return cleanValue.toFixed(1);\n  // } else {\n  //   // return Math.round(cleanValue);\n  //   return cleanValue.toFixed(0);\n  // }\n}\n","import React from 'react';\n\nimport { MAX_GSV } from '../util.js';\n\nconst RED_GSV = 25; // GSV value at which point bar color should be fully red\nconst RED_HUE = 9;\nconst GREEN_HUE = 123;\n\nexport default class Results extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gsv: 1\n    };\n  }\n\n  fractionToColor(frac) {\n    var hue = (frac * (RED_HUE - GREEN_HUE)) + GREEN_HUE;\n    return `hsl(${hue}, 100%, 43%)`;\n  }\n\n  gsvToColor(gsv) {\n    let frac = this.calculateLogFraction(gsv, RED_GSV);\n    return this.fractionToColor(frac)\n  }\n\n  calculateLogFraction(gsv, maxGsv = MAX_GSV) {\n    return Math.log10(Math.min(gsv + 1, maxGsv)) / Math.log10(maxGsv);\n  }\n\n  getGsvText(gsv) {\n    if (gsv === 50) {\n      return `${gsv}+`;\n    } else if (gsv === 0.1) {\n      return `< ${gsv}`;\n    } else if (gsv < 5) {\n      return gsv.toFixed(1);\n    } else {\n      return gsv.toFixed(0);\n    }\n  }\n\n  render() {\n    let gsv = this.props.gsv || this.state.gsv;\n    const heightPercent = `${100 * this.calculateLogFraction(gsv)}%`;\n    const color = this.gsvToColor(gsv);\n    return (\n      <div className=\"Results\">\n        <div className=\"Results-bar\" style={{height: heightPercent, backgroundColor: color}}>\n          <div className=\"Results-num\">\n            {this.getGsvText(gsv)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group'\nimport _ from 'lodash';\n\nimport '../polyfill.js';\n\nimport Factor from './Factor';\nimport Results from './Results';\n\nimport { calculateGsv } from '../util.js';\n\nexport default class Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      factors: [\n        {\n          id: 'interactions',\n          prompt: 'How many people will you interact with?',\n          type: 'number',\n          default: 15,\n          updateDefault: false,\n          input: null\n        },\n        {\n          id: 'transmission',\n          prompt: 'What\\'s the chance of transmission with an infected person?',\n          type: 'number',\n          default: 10,\n          updateDefault: false,\n          input: null\n        },\n        {\n          id: 'infected',\n          prompt: 'What percent of people in your area are infected?',\n          type: 'number',\n          default: 1.2,\n          updateDefault: true,\n          input: null\n        }\n      ]\n    };\n  }\n\n  handleFactorInputChange(factor) {\n    let factors = _.cloneDeep(this.state.factors);\n    for (const curr of factors) {\n      if (curr.id === factor.id) {\n        if (factor.type === 'number') {\n          const parsedVal = parseFloat(factor.input);\n          if (parsedVal || parsedVal === 0) {\n            curr.input = parsedVal;\n            if (factor.updateDefault) {\n              curr.default = parsedVal;\n            }\n          } else {\n            curr.input = null;\n          }\n        } else {\n          curr.input = factor.input;\n          if (factor.updateDefault) {\n            curr.default = factor.input;\n          }\n        }\n        break;\n      }\n    }\n\n    this.setState({\n      factors: factors\n    })\n  }\n\n  renderFactors() {\n    let factors = [];\n    for (const factor of this.state.factors) {\n      factors.push(\n        <Factor factor={factor} key={factor.id} onFactorInputChange={(factor) => this.handleFactorInputChange(factor)} />\n      );\n      if (factor.input === null || factor.input === undefined) {\n        break;\n      }\n    }\n    return factors;\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <div className=\"Main-container l-container\">\n          <div className=\"Main-left\">\n            <CSSTransitionGroup\n              transitionName=\"example\"\n              transitionEnterTimeout={500}\n              transitionLeaveTimeout={300}>\n              {this.renderFactors()}\n            </CSSTransitionGroup>\n          </div>\n          <div className=\"Main-right\">\n            <Results gsv={calculateGsv(this.state.factors)} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './default.scss';\n\nimport Main from './js/components/Main.js';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}