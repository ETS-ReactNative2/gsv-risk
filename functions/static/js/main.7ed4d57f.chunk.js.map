{"version":3,"sources":["assets/gsv-risk.svg","js/components/Factor.js","js/util.js","js/components/Results.js","js/components/Main.js","index.js"],"names":["module","exports","__webpack_require__","p","Input","props","_this","Object","classCallCheck","this","_super","call","state","inputChanging","value","setState","input","e","key","handleTextBlur","factor","onFactorInputChange","_this2","_step","_iterator","_createForOfIteratorHelper","options","s","n","done","option","err","f","react_default","a","createElement","className","react_select_browser_esm","classNamePrefix","onMenuOpen","handleMenuOpen","onMenuClose","handleMenuClose","onChange","values","handleSelectChange","prompt","_this3","type","handleTextChange","target","onKeyPress","handleKeyPress","onBlur","content","renderSelectContent","renderNumberContent","hasvalue","ischanging","React","Component","MAX_GSV","MIN_GSV","MASK_HELP_RATIO","RED_GSV","RED_HUE","GREEN_HUE","INITIAL_FACTORS","id","label","example","default","updateDefault","meta","calculateGsv","factors","baseFactorValues","compareFactorValues","util_createForOfIteratorHelper","resultFromFactorValues","factorValues","inner","transmission","masks","infected","Math","pow","interactions","baseResult","compareResult","gsv","log","cleanValue","min","max","getInputFromFactor","parsedVal","parseFloat","_step2","_iterator2","calculateLogFraction","maxGsv","arguments","length","undefined","log10","Results","heightPercent","concat","color","frac","gsvToColor","style","height","backgroundColor","toFixed","getGsvText","Main","uri","URI","qParams","query","Main_createForOfIteratorHelper","hasQuery","removeQuery","window","history","replaceState","toString","_","cloneDeep","curr","addQuery","encodeURIComponent","pushState","_step3","_iterator3","push","Factor_Input","handleFactorInputChange","src","logo","alt","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","renderFactors","Results_Results","ReactDOM","render","Main_Main","document","getElementById"],"mappings":"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","file":"static/js/main.7ed4d57f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gsv-risk.1ebd4893.svg\";","import React from 'react';\nimport Select from 'react-select';\n\nexport default class Input extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputChanging: false\n    };\n  }\n\n  handleTextChange(value) {\n    this.setState({\n      input: value,\n      inputChanging: true\n    });\n  }\n\n  handleKeyPress(e, value) {\n    if (e.key === 'Enter') {\n      this.handleTextBlur(value);\n    }\n  }\n\n  handleTextBlur(value) {\n    let factor = this.props.factor;\n    factor.input = value || value === 0 ? value : null;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  handleSelectChange(value) {\n    let factor = this.props.factor;\n    factor.input = value.value;\n    this.props.onFactorInputChange(factor);\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  handleMenuOpen() {\n    this.setState({\n      inputChanging: true\n    });\n  }\n\n  handleMenuClose() {\n    this.setState({\n      input: '',\n      inputChanging: false\n    });\n  }\n\n  renderSelectContent() {\n    let value = null;\n    if (this.props.factor.input || this.props.factor.input === 0) {\n      for (const option of this.props.factor.options) {\n        if (option.value === this.props.factor.input) {\n          value = option;\n          break;\n        }\n      }\n    }\n    return (\n      <label className=\"Factor-label\">\n        <Select className=\"Factor-input Factor-input--select\" classNamePrefix=\"Select\"\n                options={this.props.factor.options} value={value}\n                onMenuOpen={() => this.handleMenuOpen()} onMenuClose={() => this.handleMenuClose()}\n                onChange={(values) => this.handleSelectChange(values)} />\n        <div className=\"Factor-prompt\">\n          {this.props.factor.prompt}\n        </div>\n      </label>\n    )\n  }\n\n  renderNumberContent(value) {\n    return (\n      <label className=\"Factor-label\">\n        <input className={`Factor-input Factor-input--number`}\n              type=\"number\" value={value}\n              onChange={(e) => this.handleTextChange(e.target.value)}\n              onKeyPress={(e) => this.handleKeyPress(e, value)}\n              onBlur={(e) => this.handleTextBlur(e.target.value)}>\n        </input>\n        <div className=\"Factor-prompt\">\n          {this.props.factor.prompt}\n        </div>\n      </label>\n    )\n  }\n\n  render() {\n    const input = this.state.inputChanging ? this.state.input : this.props.factor.input;\n    const type = this.props.factor.type ? this.props.factor.type : 'text';\n    const value = input || input === 0 ? input + '' : '';\n\n    const content = this.props.factor.options ? this.renderSelectContent() : this.renderNumberContent(value);\n    return (\n      <div className=\"Factor\" hasvalue={value ? 'true' : 'false'} ischanging={this.state.inputChanging + ''}>\n        {content}\n      </div>\n    );\n  }\n}\n","export const MAX_GSV = 50;\nexport const MIN_GSV = 0.1;\n\nexport const MASK_HELP_RATIO = 0.5;\n\nconst RED_GSV = 25; // GSV value at which point bar color should be fully red\nconst RED_HUE = 9;\nconst GREEN_HUE = 123;\n\nexport const INITIAL_FACTORS = [\n  {\n    id: 'transmission',\n    prompt: 'Which best describes the type of interactions you\\'ll have?',\n    type: 'number',\n    options: [\n      {\n        'value': 2,\n        'label': 'Brief outdoor contact',\n        'example': 'Passing by somone on a sidewalk'\n      },\n      {\n        'value': 5,\n        'label': 'Brief indoor contact',\n        'example': 'Slipping by somone in a store aisle'\n      },\n      {\n        'value': 10,\n        'label': 'Brief close contact',\n        'example': 'Sharing a small elevator'\n      },\n      {\n        'value': 25,\n        'label': 'Extended close contact',\n        'example': 'Having dinner with someone'\n      },\n      {\n        'value': 50,\n        'label': 'Significant physical contact',\n        'example': 'Repeated hugging, shoulder to shoulder, etc'\n      }\n    ],\n    default: 5,\n    updateDefault: false,\n    input: null\n  },\n  // {\n  //   id: 'transmission',\n  //   prompt: 'What is the risk of transmission?',\n  //   meta: '[INPUT]% transmissibility',\n  //   type: 'number',\n  //   default: 5,\n  //   updateDefault: false,\n  //   input: null\n  // },\n  {\n    id: 'interactions',\n    prompt: 'How many people will you interact with?',\n    meta: '[INPUT] interactions',\n    type: 'number',\n    default: 15,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'masks',\n    prompt: 'What percent of people will be wearing masks?',\n    meta: '[INPUT]% of people wearing masks',\n    type: 'number',\n    default: 100,\n    updateDefault: false,\n    input: null\n  },\n  {\n    id: 'infected',\n    prompt: 'What percent of people in your area are infected?',\n    meta: '[INPUT]% infected',\n    type: 'number',\n    default: 1.2,\n    updateDefault: true,\n    input: null\n  }\n]\n\nexport function calculateGsv(factors) {\n  let baseFactorValues = {};\n  let compareFactorValues = {};\n  for (const factor of factors) {\n    baseFactorValues[factor.id] = factor.default;\n    compareFactorValues[factor.id] = factor.input || factor.input === 0 ? factor.input : factor.default;\n  }\n\n  const resultFromFactorValues = (factorValues) => {\n    const transmit = (factorValues.transmission / 100) * (1 - (factorValues.masks / 100)) + (MASK_HELP_RATIO * factorValues.transmission / 100) * (factorValues.masks / 100);\n    const inner = 1 - (transmit * (factorValues.infected / 100));\n    const result = 1 - (inner ** factorValues.interactions);\n    return result;\n  }\n\n  const baseResult = resultFromFactorValues(baseFactorValues);\n  const compareResult = resultFromFactorValues(compareFactorValues);\n\n  const gsv = Math.log(1 - compareResult) / Math.log(1 - baseResult);\n\n  let cleanValue = Math.min(gsv || gsv, MAX_GSV);\n  return Math.max(cleanValue, MIN_GSV);\n}\n\nexport function getInputFromFactor(factor) {\n  if (factor.type === 'number') {\n    const parsedVal = parseFloat(factor.input);\n    if (parsedVal || parsedVal === 0) {\n      if (factor.options) {\n        for (const option of factor.options) {\n          if (option.value === parsedVal) {\n            return parsedVal;\n          }\n        }\n        return null;\n      } else {\n        return parsedVal;\n      }\n    } else {\n      return null;\n    }\n  } else if (factor.input) {\n    return factor.input;\n  }\n  return null;\n}\n\nexport function getGsvText(gsv) {\n  if (gsv === 50) {\n    return `${gsv}+`;\n  } else if (gsv === 0.1) {\n    return `< ${gsv}`;\n  } else if (gsv < 5) {\n    return gsv.toFixed(1);\n  } else {\n    return gsv.toFixed(0);\n  }\n}\n\nexport function calculateLogFraction(gsv, maxGsv = MAX_GSV) {\n  return Math.log10(Math.min(gsv + 1, maxGsv)) / Math.log10(maxGsv);\n}\n\nexport function gsvToColor(gsv) {\n  let frac = calculateLogFraction(gsv, RED_GSV);\n  var hue = (frac * (RED_HUE - GREEN_HUE)) + GREEN_HUE;\n  return `hsl(${hue}, 100%, 43%)`;\n}\n","import React from 'react';\n\nimport { getGsvText, calculateLogFraction, gsvToColor } from '../util.js';\n\nexport default class Results extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gsv: 1\n    };\n  }\n\n  // gsvToColor(gsv) {\n  //   let frac = this.calculateLogFraction(gsv, RED_GSV);\n  //   var hue = (frac * (RED_HUE - GREEN_HUE)) + GREEN_HUE;\n  //   return `hsl(${hue}, 100%, 43%)`;\n  // }\n\n  // calculateLogFraction(gsv, maxGsv = MAX_GSV) {\n  //   return Math.log10(Math.min(gsv + 1, maxGsv)) / Math.log10(maxGsv);\n  // }\n\n  render() {\n    let gsv = this.props.gsv || this.state.gsv;\n    const heightPercent = `${100 * calculateLogFraction(gsv)}%`;\n    const color = gsvToColor(gsv);\n    return (\n      <div className=\"Results\">\n        <div className=\"Results-bar\" style={{height: heightPercent, backgroundColor: color}}>\n          <div className=\"Results-num\">\n            {getGsvText(gsv)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport _ from 'lodash';\nimport URI from 'urijs';\n\nimport Factor from './Factor.js';\nimport Results from './Results.js';\n\nimport { INITIAL_FACTORS, calculateGsv, getInputFromFactor } from '../util.js';\n\nimport logo from '../../assets/gsv-risk.svg';\n\nexport default class Main extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const uri = new URI();\n    const qParams = uri.query(true);\n    let factors = INITIAL_FACTORS;\n\n    for (const factor of factors) {\n      if (uri.hasQuery(factor.id)) {\n        factor.input = qParams[factor.id];\n        factor.input = getInputFromFactor(factor);\n        if (factor.input === null) {\n          uri.removeQuery(factor.id);\n        }\n      }\n    }\n    window.history.replaceState(null, 'GSV Risk', uri.toString());\n\n    this.state = {\n      factors: factors\n    };\n  }\n\n  handleFactorInputChange(factor) {\n    let factors = _.cloneDeep(this.state.factors);\n    for (const curr of factors) {\n      if (curr.id === factor.id) {\n        const input = getInputFromFactor(factor);\n        curr.input = input;\n        if (factor.updateDefault && (input || input === 0)) {\n          curr.default = input;\n        }\n\n        let uri = new URI();\n        uri.removeQuery(curr.id);\n        if (curr.input || curr.input === 0) {\n          uri.addQuery(curr.id, encodeURIComponent(curr.input))\n        }\n        window.history.pushState(null, 'GSV Risk', uri.toString());\n\n        break;\n      }\n    }\n\n    this.setState({\n      factors: factors\n    })\n  }\n\n  renderFactors() {\n    let factors = [];\n    for (const factor of this.state.factors) {\n      factors.push(\n        <Factor factor={factor} key={factor.id} onFactorInputChange={(factor) => this.handleFactorInputChange(factor)} />\n      );\n      if (factor.input === null || factor.input === undefined) {\n        break;\n      }\n    }\n    return factors;\n  }\n\n  render() {\n    return (\n      <div className=\"Main\">\n        <header className=\"Main-header\">\n          <img className=\"Main-logo\" src={logo} alt=\"GSV Risk\" />\n          <h1 className=\"Main-title\">GSV Risk</h1>\n        </header>\n        <div className=\"Main-container l-container\">\n          <div className=\"Main-left\">\n            <CSSTransitionGroup\n              transitionName=\"example\"\n              transitionEnterTimeout={500}\n              transitionLeaveTimeout={300}>\n              {this.renderFactors()}\n            </CSSTransitionGroup>\n          </div>\n          <div className=\"Main-right\">\n            <Results gsv={calculateGsv(this.state.factors)} />\n          </div>\n        </div>\n        <footer className=\"Main-footer l-container\">\n          <div className=\"Main-disclaimer\">This is for entertainment purposes only. Pleeeeease continue to follow your local health agency's guidelines.</div>\n        </footer>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './js/polyfill.js';\nimport './default.scss';\n\nimport Main from './js/components/Main.js';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}